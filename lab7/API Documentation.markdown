# API Documentation for Library Management System

## Overview
This API provides endpoints to manage a library's book collection. It supports CRUD operations (Create, Read, Update, Delete) for books, with data validation using Pydantic and persistence in a SQLite database.

**Base URL**: `http://localhost:8000`

## Endpoints

### 1. GET /books
**Description**: Retrieves a list of all books in the library.

**Query Parameters**: None.

**Response**:
- **200 OK**: Returns a list of books.
- **Example Request**:
  ```bash
  curl -X GET "http://localhost:8000/books"
  ```
- **Example Response** (200 OK):
  ```json
  [
    {
      "id": 1,
      "title": "The Great Gatsby",
      "author": "F. Scott Fitzgerald",
      "price": 10.99
    },
    {
      "id": 2,
      "title": "1984",
      "author": "George Orwell",
      "price": 8.99
    }
  ]
  ```
- **Example Response** (Empty List):
  ```json
  []
  ```

### 2. GET /books/{book_id}
**Description**: Retrieves a specific book by its ID.

**Path Parameters**:
- `book_id` (required, integer): The unique identifier of the book.

**Response**:
- **200 OK**: Returns the book details.
- **404 Not Found**: If the book with the specified ID does not exist.
- **Example Request**:
  ```bash
  curl -X GET "http://localhost:8000/books/1"
  ```
- **Example Response** (200 OK):
  ```json
  {
    "id": 1,
    "title": "The Great Gatsby",
    "author": "F. Scott Fitzgerald",
    "price": 10.99
  }
  ```
- **Example Response** (404 Not Found):
  ```json
  {
    "detail": "Book not found"
  }
  ```

### 3. POST /books
**Description**: Creates a new book in the library.

**Request Body** (JSON):
- `title` (required, string): The title of the book.
- `author` (required, string): The author of the book.
- `price` (required, float): The price of the book.

**Response**:
- **200 OK**: Returns the created book with its assigned ID.
- **400 Bad Request**: If the request body is invalid (e.g., missing required fields or invalid data types).
- **Example Request**:
  ```bash
  curl -X POST "http://localhost:8000/books" \
  -H "Content-Type: application/json" \
  -d '{"title": "Dune", "author": "Frank Herbert", "price": 15.99}'
  ```
- **Example Response** (200 OK):
  ```json
  {
    "id": 3,
    "title": "Dune",
    "author": "Frank Herbert",
    "price": 15.99
  }
  ```
- **Example Response** (400 Bad Request):
  ```json
  {
    "detail": [
      {
        "loc": ["body", "title"],
        "msg": "field required",
        "type": "value_error.missing"
      }
    ]
  }
  ```

### 4. PUT /books/{book_id}
**Description**: Updates an existing book by its ID.

**Path Parameters**:
- `book_id` (required, integer): The unique identifier of the book.

**Request Body** (JSON):
- Same as POST /books.

**Response**:
- **200 OK**: Returns the updated book.
- **404 Not Found**: If the book with the specified ID does not exist.
- **400 Bad Request**: If the request body is invalid.
- **Example Request**:
  ```bash
  curl -X PUT "http://localhost:8000/books/1" \
  -H "Content-Type: application/json" \
  -d '{"title": "Updated Gatsby", "author": "F. Scott Fitzgerald", "price": 12.99}'
  ```
- **Example Response** (200 OK):
  ```json
  {
    "id": 1,
    "title": "Updated Gatsby",
    "author": "F. Scott Fitzgerald",
    "price": 12.99
  }
  ```
- **Example Response** (404 Not Found):
  ```json
  {
    "detail": "Book not found"
  }
  ```

### 5. DELETE /books/{book_id}
**Description**: Deletes a book by its ID.

**Path Parameters**:
- `book_id` (required, integer): The unique identifier of the book.

**Response**:
- **200 OK**: Returns a confirmation message.
- **404 Not Found**: If the book with the specified ID does not exist.
- **Example Request**:
  ```bash
  curl -X DELETE "http://localhost:8000/books/1"
  ```
- **Example Response** (200 OK):
  ```json
  {
    "message": "Book deleted successfully"
  }
  ```
- **Example Response** (404 Not Found):
  ```json
  {
    "detail": "Book not found"
  }
  ```

## Data Schemas

### Book
```json
{
  "id": "integer", // Unique identifier of the book, auto-generated by the database
  "title": "string", // Book title, required
  "author": "string", // Book author, required
  "price": "float" // Price of the book, required, must be a non-negative number
}
```

**Comments**:
- The `id` field is automatically generated by the SQLite database and should not be included in POST or PUT requests.
- The `title` and `author` fields are required and validated to ensure they are non-empty strings.
- The `price` field is required and must be a valid floating-point number (e.g., `10.99`). Negative values may be allowed depending on business logic, but typically should be non-negative.
- Validation is handled by Pydantic models, ensuring type safety and required fields.

## Notes
- The API uses SQLite for data persistence, stored in `library.db`.
- Input validation is performed using Pydantic models.
- Automatic interactive documentation is available at `http://localhost:8000/docs` (Swagger UI) or `http://localhost:8000/redoc` (ReDoc).
- The API is built with FastAPI, ensuring high performance and asynchronous request handling.